import * as vscode from 'vscode';
import { registerPreviewCommand } from './preview';
import { registerRandomItemCommand } from './randomitem';
import { registerScaleItemCommand } from './scaleItem';
import { registerSyntaxHighlight } from './theme';
import { registerCompletionProviders, dyeColorProvider, dyeColorPresentationProvider } from './completion';
import { registerBulkModifyCommand } from './modifier';

import * as yaml from 'js-yaml';

//  **K√≠ch ho·∫°t Extension**
let firstRun = true; // ‚úÖ C·ªù ki·ªÉm tra l·∫ßn kh·ªüi ƒë·ªông ƒë·∫ßu ti√™n
export function activate(context: vscode.ExtensionContext) {
    registerPreviewCommand(context);


    registerCompletionProviders(context);


    registerRandomItemCommand(context);


    registerScaleItemCommand(context);


    registerSyntaxHighlight(context);

    console.log("‚úÖ MMOItems Config Helper activated!");
    context.subscriptions.forEach((sub, index) => {
        if ((sub as any)._command === "mmoitems.bulkModify") {
            context.subscriptions.splice(index, 1);
        }
    });

    // üõ† **ƒêƒÉng k√Ω t√≠nh nƒÉng Bulk Modifier**
    registerBulkModifyCommand(context);


    const editor = vscode.window.activeTextEditor;
    if (!editor) {
        vscode.window.showErrorMessage("‚ùå No active text editor.");
        return;
    }

    let items: Record<string, any> = {};
    try {
        const text = editor.document.getText();
        items = yaml.load(text) as Record<string, any>;
    } catch (error) {
        vscode.window.showErrorMessage(`‚ùå YAML error: ${error}`);
        return;
    }





    // üåà ƒêƒÉng k√Ω h·ªó tr·ª£ m√†u cho `dye-color:`
    context.subscriptions.push(dyeColorProvider);
    context.subscriptions.push(dyeColorPresentationProvider);

    // üîÑ **C·∫≠p nh·∫≠t b·∫£ng m√†u khi file thay ƒë·ªïi**
    vscode.workspace.onDidChangeTextDocument((event) => {
        if (event.document.languageId === "yaml") {
            vscode.commands.executeCommand("editor.action.documentColorProvider.refresh");
        }
    });
}


//  **T·∫Øt Extension**
export function deactivate() {
    console.log("‚ùå MMOItems Config Helper deactivated.");
}
